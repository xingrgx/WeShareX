// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// RecordDao is the data access object for table wsx_record.
type RecordDao struct {
	table   string        // table is the underlying table name of the DAO.
	group   string        // group is the database configuration group name of current DAO.
	columns RecordColumns // columns contains all the column names of Table for convenient usage.
}

// RecordColumns defines and stores column names for table wsx_record.
type RecordColumns struct {
	Id         string // 聊天记录ID
	SenderId   string // 发送者ID
	ReceiverId string // 接收者ID
	Content    string // 内容
	Time       string // 发送时间
}

//  recordColumns holds the columns for table wsx_record.
var recordColumns = RecordColumns{
	Id:         "id",
	SenderId:   "sender_id",
	ReceiverId: "receiver_id",
	Content:    "content",
	Time:       "time",
}

// NewRecordDao creates and returns a new DAO object for table data access.
func NewRecordDao() *RecordDao {
	return &RecordDao{
		group:   "default",
		table:   "wsx_record",
		columns: recordColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *RecordDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *RecordDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *RecordDao) Columns() RecordColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *RecordDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *RecordDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *RecordDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
