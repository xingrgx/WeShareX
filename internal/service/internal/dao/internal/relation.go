// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// RelationDao is the data access object for table wsx_relation.
type RelationDao struct {
	table   string          // table is the underlying table name of the DAO.
	group   string          // group is the database configuration group name of current DAO.
	columns RelationColumns // columns contains all the column names of Table for convenient usage.
}

// RelationColumns defines and stores column names for table wsx_relation.
type RelationColumns struct {
	Id      string // ID
	ShareId string // 分享ID
	FileId  string // 文件ID
}

//  relationColumns holds the columns for table wsx_relation.
var relationColumns = RelationColumns{
	Id:      "id",
	ShareId: "share_id",
	FileId:  "file_id",
}

// NewRelationDao creates and returns a new DAO object for table data access.
func NewRelationDao() *RelationDao {
	return &RelationDao{
		group:   "default",
		table:   "wsx_relation",
		columns: relationColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *RelationDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *RelationDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *RelationDao) Columns() RelationColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *RelationDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *RelationDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *RelationDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
